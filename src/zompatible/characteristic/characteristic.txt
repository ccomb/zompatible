===============
CHARACTERISTICS
===============

A characteristic is a physical and intrinsic descriptive element of a product.
A product should be fully described by the list of its characteristics.
For instance, a TV screen can be described by its size, its weight, its resolution, etc.
So we should have a characteristic object that materialize the resolution.
For a motherboard, we can also have a characteristic object that represent
the CPU socket. That say, the motherboard has a socket 975, this socket is a
female socket. A characteristic can also store characteristics to have hierarchic
characteristics : A possible characteristic for a laptop is to have a DVD burner.
The dvd burner can have characteristics itself (weight), or features (burning speed)
So a product can itself be a characteristic : the burner is at the same time a 
characteristic of the laptop, and a product made by an organization.
This could be made by implementing an adapter from a product to ICharacteristic.
querying the product as a characteristic will lookup the adapter.

Warning: Characteristics are (are they?) different from features.
Features are a functionnal description, and are used to describe
the usage of the product, what works, what doesn't work,
what can be enabled or disabled, etc.

Accessing object characteristics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Let's create a dummy object, so we can put characteristics on this object.

    >>> class MyObject(object):
    ...     pass
    >>> myobj = MyObject()

We register the adapter from ICharacterizable to ICharacteristics
and the annotation adapter

    >>> from zompatible.characteristic.interfaces import ICharacteristics, ICharacterizable
    >>> from zompatible.characteristic.characteristic import Characteristics
    >>> from zope.component import provideAdapter
    >>> provideAdapter(Characteristics, provides=ICharacteristics)

    >>> from zope.annotation.attribute import AttributeAnnotations
    >>> from zope.annotation.interfaces import IAttributeAnnotatable, IAnnotations
    >>> provideAdapter(AttributeAnnotations, provides=IAnnotations)

This object is not yet characterizable, we cannot get its characteristics::

    >>> ICharacteristics(myobj)
    Traceback (most recent call last):
    ...
    TypeError: ('Could not adapt',
                <MyObject object at ...>,
                <InterfaceClass zompatible.characteristic.interfaces.ICharacteristics>)

Now we make our object characterizable, so we can get the (empty) list
of characteristics::

    >>> from zope.interface import alsoProvides
    >>> alsoProvides(myobj, ICharacterizable)
    >>> characteristics = ICharacteristics(myobj)
    >>> characteristics.characteristics
    []

Characteristic object
~~~~~~~~~~~~~~~~~~~~~

A characteristic is an object. There are so many characteristics that we can't write an
implementation for each one. But there are different classes of characteristics:
 - Some characteristics have only a name, a description, and a true/false value,
       ex: "Removable/replaceable power unit" : yes/no
 - other characteristics have a name, a description, a numerical value and a unit:
       ex: "Line-out maximum output" : 34 dBV
 - other characteristics have a name, a tuple of numerical values and a single unit:
       ex: "Display resolution" : 1280x1024 pixels
 - or three values in a tuple and a single unit : dimension (LongxLargxHaut): 40x50x60 mm
 - or n values and n units : 
 - or even a list : Certification : [ TCO'03, ISO 13406-2, MPR III, CE, TÜV GS, FCC-B, UL/C-UL, VCCI-B]
 - or a range : Horizontal scan range : 24 - 80 KHz
 - or a text string : Colour of product : White
 - or even a compound characteristic :  Power supply type  :  AC 100 - 240 V, 50/60 Hz

Let's try to implement several different characteristics::

    >>> from zompatible.characteristic.characteristic import Characteristic
    >>> repl_pow = Characteristic(name=u'Replaceable power unit', value=True)
    >>> line_out = Characteristic(name=u'line out maximum output', value=34, unit=u'dBV')
    >>> reso = Characteristic(name=u'Resolution', value=(1600, 1200), unit=(u'px',u'px'))
    >>> size = Characteristic(name=u'Size', value=(40, 50, 60), unit=u'mm')
    >>> certif = Characteristic(name=u'Certifications', value=[ u'TCO\'03', u'ISO 13406-2', u'MPR III', u'CE', u'TÜV GS', u'FCC-B', u'UL/C-UL', u'VCCI-B'])
    >>> freqs = Characteristic(name=u'Horizontal scan range', value=(24, 80), unit=u'kHz')
    >>> color = Characteristic(name=u'Colour', value=u'White')
    >>> phys = Characteristic(name=u'Connection Interface', value=u'VGA')
    >>> valim = Characteristic(name=u'Voltage', value=(100, 240), unit=u'V')
    >>> falim = Characteristic(name=u'Voltage Frequency', value=(50, 60), unit=u'Hz')

Set a characteristics::
    >>> characteristics.characteristics = [repl_pow]
    >>> characteristics.characteristics[0].name
    u'Replaceable power unit'
    >>> characteristics.characteristics is ICharacteristics(myobj).characteristics
    True
    
Add others::

    >>> characteristics.characteristics.extend([line_out, reso, size, certif, freqs, color, phys, valim, falim])
    >>> reso.value
    (1600, 1200)
    >>> falim.unit
    u'Hz'
    >>> certif.name
    u'Certifications'
    >>> [c.unit for c in characteristics.characteristics]
    [None, u'dBV', (u'px', u'px'), u'mm', None, u'kHz', None, None, u'V', u'Hz']


