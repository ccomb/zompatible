
=======
PRODUCT
=======
We define a new product (multi function USB printer/scanner/card reader)

	>>> from zompatible.product.product import Product
    >>> from zope.interface import providedBy, alsoProvides

    >>> multi = Product(u'Hewlett-Packard PhotoSmart C5180')
    >>> list(providedBy(multi))
    [<InterfaceClass zompatible.product.interfaces.IProduct>]
    >>> print multi.Display()
    Name: Hewlett-Packard PhotoSmart C5180
    None

The interface describing the physical interface is added to the product:
    >>> from zope.interface import alsoProvides
	>>> from zope.component import provideAdapter
	>>> from zompatible.characteristic.interfaces import IHasPhysInterface, IPhysInterface
	>>> from zompatible.characteristic.characteristic import HasPhysInterface
	
	>>> alsoProvides(multi,IHasPhysInterface)
	>>> provideAdapter(HasPhysInterface) # implement(IPhysInterface) adapts(IHasPhysInterface)
	>>> IPhysInterface(multi).Name()
	u'Interface'
	
	
We verify that we can write/read through the IPhysInterface interface:
	>>> IPhysInterface(multi).interface = u'USB'
	>>> IPhysInterface(multi).Display()
	Interface: USB
	>>> multi.Display()
	Name: Hewlett-Packard PhotoSmart C5180
	Characteristics:
	Interface: USB
	
Now we will add the sub product scanner to the multifunction product.

First we create a scanner product with the resolution characteristic:
	>>> scanner = Product()
	>>> scanner.name = u'Scanner'
	>>> from zompatible.characteristic.interfaces import IResolution, IHasResolution
	>>> from zompatible.characteristic.characteristic import HasResolution
	>>> alsoProvides(scanner, IHasResolution)
	>>> provideAdapter(HasResolution) # implement(IResolution) adapts(IHasResolution)
	>>> IResolution(scanner).Name()
	u'Resolution'
	>>> IResolution(scanner).x = 2400
	>>> IResolution(scanner).y = 4800
	>>> IResolution(scanner).unit = 'dpi'
	>>> IResolution(scanner).Display()
	Resolution: 2400x4800 dpi
	>>> scanner.Display()
	Name: Scanner
	Characteristics:
	Resolution: 2400x4800 dpi
	
We add the sub product:
	>>> len(multi.subProducts)
	0
	>>> multi.AddProduct(scanner)
	>>> len(multi.subProducts)
	1
	>>> multi.Display()
	Name: Hewlett-Packard PhotoSmart C5180
	Characteristics:
	Interface: USB
	-----
	Name: Scanner
	Characteristics:
	Resolution: 2400x4800 dpi
	

========
CATEGORY
========
A category is virtual product, with all the needed caracteristic interfaces
set with default values. A product associated with a category will get a copy
of the category as a subProduct.

    >>> from zompatible.categorynew.category import Category
   	>>> printerCategory = Category(u'Printer')
   	>>> alsoProvides(printerCategory, IHasResolution)
 	>>> IResolution(printerCategory).Name()
 	u'Resolution'
	>>> IResolution(printerCategory).unit = 'dpi'
	>>> from zompatible.categorynew.interfaces import IIsPrinter
	>>> alsoProvides(printerCategory, IIsPrinter)
	
Duplicate the category in order to create a new object and to
add it as a newsub product to the multi function product:
	>>> printer = printerCategory.NewProduct()

Check that no error occurs if data are not initialized
	>>> printer.Display()
	Name: Printer
	Characteristics:

Setting up the printer resolution (wrong ones):
	>>> IResolution(printer).x = 123
	>>> IResolution(printer).y = 456
	>>> printer.Display()
	Name: Printer
	Characteristics:
	Resolution: 123x456 dpi

	>>> multi.AddProduct(printer)

Retreiving the 	categories covered by the product:
	>>> multi.GetCategories()
	['<InterfaceClass zompatible.categorynew.interfaces.IIsPrinter>']

Retreive the sub product given its category type:
	>>> printer = multi.GetProduct(IIsPrinter)
	>>> printer.Display()
	Name: Printer
	Characteristics:
	Resolution: 123x456 dpi

Setting up the caracteristic of the printer (good ones):
	>>> IResolution(printer).x = 4800
	>>> IResolution(printer).y = 1200
	>>> IResolution(printer).Display()
	Resolution: 4800x1200 dpi
	>>> multi.Display()	
	Name: Hewlett-Packard PhotoSmart C5180
	Characteristics:
	Interface: USB
	-----
	Name: Scanner
	Characteristics:
	Resolution: 2400x4800 dpi
	-----
	Name: Printer
	Characteristics:
	Resolution: 4800x1200 dpi

===	
END
===	
    >>> from zompatible.organization.organization import Organization
    >>> from zope.interface import providedBy, alsoProvides, directlyProvidedBy, directlyProvides

We define a new organization
    >>> nvidia = Organization()
    >>> nvidia.names
    []
    >>> nvidia.names.append(u'Nvidia')
    >>> list(providedBy(nvidia))
    [<InterfaceClass zompatible.organization.interfaces.IOrganization>,
     <InterfaceClass zope.app.folder.interfaces.IFolder>,
     <InterfaceClass persistent.interfaces.IPersistent>,
     <InterfaceClass zope.app.component.interfaces.IPossibleSite>,
     <InterfaceClass zope.app.container.interfaces.IContained>]

	
	>>> usb = Caracteristic()
	>>> usb.name = 'USB'






Now we tell that a product is categorizable

    >>> alsoProvides(nvs, ICategorizable)
    >>> provideAdapter(ProductCategories) # implement(ICategories) adapts(ICategorizable)
    >>> categories = ICategories(nvs)
    
Category creation (Scanner)

    >>> from zompatible.categorynew.categorynew import Category
   	>>> scanner = Category()
   	>>> scanner.name = u'Scanner'
   	
Adapter from ICaracterizable to ICaracteristics
    >>> from zompatible.caracteristic.caracteristic import Caracteristics
	>>> provideAdapter(Caracteristics)
	
Add all possible caracteristics to the category
	>>> alsoProvides(scanner, ICaracterizable)
	>>> ICaracteristics(Scanner).caracteristics
	[]
	
Caracteristic creation
	>>> from zompatible.caracteristic.caracteristic import Caracteristic
	>>> usb = Caracteristic()
	>>> usb.name = 'USB'
	
To be able to add a caracteristic recursively we could provide ICaracterizable
	>>> # alsoProvides(usb, ICaracterizable)
	>>> usb2 = Caracteristic()
	>>> usb2.name = 'USB'


	>>> IPhysicalInterfaces(scanner) # means we have an adapter from IHasPhysicalInterface to IPhysicalInterface
	
	IPhysicalInterfaces de type ICaracteristic (type d'interface) ??
	
	>>> ICaracteristics(scanner)
	
We tell that usb is a physical interface

	>>> alsoProvides(usb, IPhysicalInterface)


	
Add a caracteristic to a category
	>>> 
	
Select a category for a product

Add a caracteristic to a product that is not included in a category

	
	




