==========
CATEGORIES
==========

Category object
~~~~~~~~~~~~~~~

A category is just an object with a name defining the category::

    >>> from zompatible.category.category import Category
    >>> category = Category(u'printer')
    >>> category.name
    u'printer'

ANY object can be categorized, which means we can store an retrieve categories from it.
The job is done by an adapter from ICategorizable to ICategories.
So we must first register the adapter, then try to use categories::

    >>> from zope.app.container.contained import Contained
    >>> from zompatible.category.interfaces import ICategorizable, ICategories
    >>> from zompatible.category.category import Categories
    >>> from zope.component import provideAdapter
    >>> provideAdapter(Categories, provides=ICategories)

    >>> class MyObject(Contained):
    ...     pass
    >>> myobj = MyObject()
    >>> ICategories(myobj)
    Traceback (most recent call last):
    ...
    TypeError: ('Could not adapt', <MyObject object at ...>, <InterfaceClass zompatible.category.interfaces.ICategories>)

Oops, we forgot to tell our object should be categorizable.
We must also register the annotation adapter.
By beeing categorizable, our object becomes annotatable

    >>> from zope.annotation.attribute import AttributeAnnotations
    >>> from zope.annotation.interfaces import IAttributeAnnotatable, IAnnotations, IAnnotatable
    >>> provideAdapter(AttributeAnnotations, provides=IAnnotations)
    >>> IAnnotatable.providedBy(myobj) or IAttributeAnnotatable.providedBy(myobj)
    False
    >>> from zope.interface import alsoProvides
    >>> alsoProvides(myobj, ICategorizable)
    >>> IAnnotatable.providedBy(myobj) and IAttributeAnnotatable.providedBy(myobj)
    True

Reading and writing categories on an object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now we can access the categories of the object::

    >>> ICategories(myobj)
    <zompatible.category.category.Categories object at ...>
    >>> categories = ICategories(myobj).categories
    >>> categories
    []

We can add one or several categories::

    >>> categories.append(category)
    >>> [cat.name for cat in ICategories(myobj).categories]
    [u'printer']

We can remove a category::

    >>> del categories[0]
    >>> categories
    []

Available categories
~~~~~~~~~~~~~~~~~~~~

Categories are plain objects stored in a category container, in a hierarchical manner.

    >>> from zope.app.component.hooks import getSite
    >>> root = getSite()
    >>> root['myobj'] = myobj
    >>> sm = root.getSiteManager()

When we get all the possible available categories for our object, it should
automatically create a category container in the site manager if it doesn't exist,
and we should first get an empty folder.

    >>> from zompatible.category.interfaces import IAvailableCategories
    >>> available_categories = IAvailableCategories(myobj)
    >>> available_categories
    <zompatible.category.category.AvailableCategoriesContainer object at ...>
    >>> list(sm)
    [u'default', u'zompatible.category']
    >>> list(sm['zompatible.category'])
    [u'MyObject_categories']

If we perform a second lookup, the container should be the same::
    >>> available_categories2 = IAvailableCategories(myobj)
    >>> available_categories2 is available_categories
    True
    >>> available_categories is sm['zompatible.category'][u'MyObject_categories']
    True

We can add possible categories

    >>> available_categories['cat1'] = Category(u'cat1')
    >>> available_categories['cat1']['cat2'] = Category(u'cat2')
    >>> len(available_categories)
    1

    >>> from zope.component import getUtility
    >>> from zope.app.intid.interfaces import IIntIds   
    >>> getUtility(IIntIds).register(available_categories['cat1'])
    0
    >>> getUtility(IIntIds).register(available_categories['cat1']['cat2'])
    1

    
Vocabulary of available categories
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The vocabulary is used in the form to display a list of available categories to choose from.

We first create a ICategories object (it should usually be an adapter)
 
	>>> from zompatible.category.category import AvailableCategoriesVocabulary
	>>> vocab = AvailableCategoriesVocabulary(ICategories(myobj))
	>>> [term.title for term in vocab]
	[u'cat1', u'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cat2']
	>>> vocab = AvailableCategoriesVocabulary(ICategories(myobj))
	>>> [term.token for term in vocab]
	['0', '1']
	>>> vocab = AvailableCategoriesVocabulary(ICategories(myobj))
	>>> [term.value.name for term in vocab]
	[u'cat1', u'cat2']

Category Deletion
~~~~~~~~~~~~~~~~~

A category can be marked as "inactive"

    >>>
    
A category can be marked as "deleted"

    >>>

category deletion : objects are not modified, but the category is just marked as "deleted".
Each time a category is accessed from an object, the category of the object is changed to
the parent category, or deleted if there is no parent. So we don't need to update the whole
database when modifying a category object.
